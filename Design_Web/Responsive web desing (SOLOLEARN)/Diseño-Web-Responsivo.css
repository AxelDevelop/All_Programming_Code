/* ------------------PASO 1--------------- */

.container{
    margin: 0px auto;
    max-width: 900px;
    text-transform: capitalize;
}

.container-header, .features, .quote, footer{
    border-radius: 20px;
}

@keyframes BGgradient {
	0% {
		background-position: 0% 100%;
	}
	50% {
		background-position: 100% 0%;
	}
    100% {
		background-position: 0% 100%;
    }

}

/* ---------------------HEADER---------------- */

.container-header{
    margin: 0 auto;
    width: 100%;
    /* background-color: #284b63; */

/* -------------COSITAS EXTRAS--------------- */

    background: linear-gradient(120deg, #121212, #606060);

	background-size: 300%;
	animation: BGgradient 10s ease-in-out infinite;


    /* dato: */

    /* margen: 0 automático; asegura que el contenido permanezca en el centro del contenedor, independientemente de su tamaño. */

    /* En una pantalla de más de 900 px de ancho, el div contenedor tendrá un ancho de 900 px, así que lo alineamos con el centro de la pantalla. */
}

header{
    color: #fff;
    padding: 80px auto;
    text-align: center;

}


h1{
    font-size: 46px;
    margin: 0 0 16px 0;
    cursor: default;
}

h2{
    font-weight: 300;
    font-size: 24px;
    margin: 0 0 16px 0;
    cursor: default;

}

.btn{
    display: inline-block;
    /* La propiedad de visualización especifica el comportamiento de visualización del elemento. */
    /* Lo hemos configurado en inline-block, para que el enlace se comporte como un contenedor de bloques en línea. */

    color: white;
    font-weight: 500;
    font-size: 20px;
    /* background: #549da0; */
    border: none;
    border-radius: 5px;
    padding: 12px 16px;
    cursor: pointer;
    margin-bottom: 10px;

/* -------------COSITAS EXTRAS--------------- */

    background: linear-gradient(120deg, #121212, #606060);

    background-size: 300%;
	/* width: 100%;
	height: 100%; */
	animation: BGgradient 10s ease infinite;
}

.container-header li{
    list-style: none;
}

.btn:hover, h1:hover, h2:hover{
    color: magenta;
    transition: linear;
    transition-duration: 0.5s;
}

.feature p:hover, .quote p:hover, cite:hover{
    color: #121212;
    transition: linear;
    transition-duration: 0.5s;
}

/* -------------------SUBMENU----------------------- */

.submenu{
    left: 57%;
    top: 19%;
    transform: translate(0%, 19%);
    text-align: center;
    position: absolute;
    /* background: #549da0; */
    min-width: 150px;
    border-radius: 5px;
    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
    background: linear-gradient(120deg, #121212, #606060);
	background-size: 300%;
	animation: BGgradient 10s ease-in-out infinite;
    display: none;
    
}

.submenu a {
    color: white;
    padding: 12px 16px;
    text-decoration: none;
    display: block;
}

.submenu a:hover{
    color: magenta;
    transition: linear;
    transition-duration: 0.5s;
}


/* Usamos un truco de CSS para colocar nuestro submenú en el centro de la pantalla. La combinación de posicionamiento absoluto, usando la propiedad left y transform, da como resultado que nuestro submenú se coloque en el centro de la pantalla y se abra sobre los elementos de la página.

También usamos display: block; para nuestros enlaces, para que se comporten como elementos a nivel de bloque. */

/* ---------------------------SECTION------------------------ */

section{
    padding: 40px auto;
    text-align: center;
    margin: 20px 0;
}

.features{
    background: #ffffff;
    color: #549da0;
}

.feature{
    width: 32%;
    display: inline-block;
    font-size: 16px;
}

.feature img{
    width: 40%;
    border-radius: 10px;
}
/* Debido a que tenemos 3 características, le dimos a cada característica div el 32% del ancho de su contenedor.

El espacio restante se dejará para el espacio entre los elementos.
También configuramos el ancho de las imágenes para que sea el 40% de sus contenedores. */

/* Al usar solo valores de% para los anchos, las entidades siempre permanecerán una al lado de la otra y se colocarán horizontalmente, independientemente del ancho del navegador. */

/* -------------------------SECTION QUOTE--------------------- */

.quote{
    background: #549da0;
    color: #fff;
}

blockquote{
    margin: 0;
    padding: 0;
    text-align: center;
}

blockquote p {
    margin: 0 0 5px 0;
    font-size: 24px;

}

blockquote cite{
    font-size: 16px;
    font-style: italic;
}

blockquote cite:before{
    content: '-';
    margin-right: 5px;
}

/* Primero, necesitamos restablecer el relleno / margen del elemento blockquote ya que los navegadores tienen algunos valores predeterminados para ellos.

También definimos los tamaños de fuente y los márgenes de los elementos.

Por último, pero no menos importante, usamos el selector :before para establecer un guión antes del elemento cite. */


/* Podríamos haber agregado el guión en el texto de la etiqueta cite, pero esta es una forma más elegante de hacer lo mismo. */

/* -----------------------FOOTER---------------------- */

/* este Contiene un menú y texto de copyright.

Es una práctica común utilizar una lista para los elementos del menú. */


footer{
    /* background: #353535; */
    padding: 32px 0;
    text-align: center;
    color: #868686;
    font-size:12px;
    background: linear-gradient(120deg, #121212, #606060);

    background-size: 300%;
	/* width: 100%;
	height: 100%; */
	animation: BGgradient 15s ease-in-out infinite;
}

footer ul{
    margin: 0;
    padding: 0;
    list-style: none;
}

footer li{
    display: inline-block;
}

footer li a{
    padding: 6px;
    font-size: 14px;
    text-decoration: none;
    color: #c3c3c3;
}

footer li a:hover{
    color: white;
}
/* Para hacer que la lista del menú sea horizontal y eliminar las viñetas, usamos list-style: none; para el elemento ul.

También configuramos display: inline-block; para que los elementos de la lista se conviertan en contenedores de elementos de nivel en línea y que se coloquen uno al lado del otro horizontalmente.

El resto de los estilos son texto simple y colores de fondo, así como tamaños de texto. */



/* ------------------------------------------------------------------------------- */


/* Ahora, necesitamos agregar algunos estilos CSS básicos para darle a nuestras secciones algo de color y tamaño. */

/* Hemos utilizado acolchado para dar cierta altura a las secciones. */

/* Dado que proporcionamos solo dos valores para el relleno, establecerá el relleno superior e inferior en el valor proporcionado. (padding: 40px 0; es lo mismo que padding: 40px 0 40px 0;) */

/* También hemos definido colores de fondo y texto para las secciones. */

/* No hemos dado ancho a las secciones, por lo que ocuparán todo el ancho disponible. */

/* Esto significa que cuando se cambia el tamaño de la pantalla, el ancho de la sección siempre permanecerá al 100% del ancho disponible. */

/* Dado que estamos planeando crear una página receptiva, no establecemos ningún valor de ancho fijo para nuestras secciones; más bien hacemos que ocupe todo el ancho de la pantalla. */

/* --------------------------FINAL-------------------------- */

/* ¡Hemos completado la construcción de la versión de escritorio de nuestra página de destino! */

/* Sin embargo, aunque siempre ocupa todo el ancho del navegador, no responde realmente, ya que el diseño sigue siendo el mismo para pantallas más pequeñas y no es muy compatible con dispositivos móviles. */

/* ¡Lo haremos receptivo en el próximo módulo! */


/* ----------------------------MAKING IT RESPONSIVE (VIEWPORT)---------------------- */

/* Antes de comenzar a hacer que nuestra página de destino sea receptiva, debemos cubrir algunos conceptos. */

/* El primer concepto es la ventana gráfica: el área visible de una página web. */

/* Por lo general, una página web con un ancho fijo se vuelve demasiado grande para caber en la ventana gráfica de una pantalla pequeña, como un dispositivo móvil o una tableta. Para solucionar esto, los navegadores en esos dispositivos redujeron la página web completa para adaptarse a la pantalla. */

/* Puede controlar la ventana gráfica de sus páginas web. Toque Continuar para ver cómo. */

/* ----------------------MEDIA QUERIES------------------- */

/* Las media queries brindan la capacidad de especificar diferentes estilos CSS para diferentes anchos de la ventana gráfica u otras especificaciones.
Esto hace posible que una página web defina diferentes estilos de diseño para diferentes tamaños de pantalla y haga que la página responda.

Usted define una consulta de medios usando la regla @media dentro de su hoja de estilo existente: */

/* @media screen and (max-width: 600px) {
    body{
        background: blue;
    }
} */

/* La regla @media es seguida por el tipo de medio al que nos dirigimos (la pantalla en nuestro caso (screen) y establece la condición cuando se aplican las reglas (ancho máximo: 600px en nuestro caso (max-whidth)). */

/* Así que ahora, el estilo se aplicará si la página tiene un ancho de hasta 600 px. */

/* También puede definir varias condiciones, por ejemplo, un ancho máximo y mínimo de la ventana gráfica: */

/* También puede definir varias condiciones, por ejemplo, un ancho máximo y mínimo de la ventana gráfica: */

/* @media screen and (min-width: 800px) and (max-width: 1024px) {
    body {
      background-color: blue;
   }
 } */

 /* Ahora el estilo se aplicará a tamaños de pantalla de 800 a 1024px. */

 /* También puede definir múltiples consultas de medios para una sola página web. */

 /* Las consultas de medios (media queries) le permiten definir puntos de interrupción cuando deben cambiar el diseño y el estilo de la página, así como definir los estilos CSS correspondientes para estos puntos de interrupción. */


/* -----------------------MEDIA QUERIES PARA LA ESTA PAG------------------- */

/* Ahora que sabemos cómo definir estilos CSS para diferentes tamaños de pantalla, ¡podemos comenzar a hacer que nuestra página de destino sea receptiva!

Un punto de interrupción típico para una pantalla móvil es de 480 píxeles de ancho.
Definamos la ventana gráfica y el destino de la consulta de medios vacía para nuestra página de destino: */

/* @media screen and (max-width: 480px) */
/* Crearemos estilos separados para nuestras secciones cuando el tamaño de la pantalla sea inferior a 480px de ancho. */

/* Nota: 480px es el punto de interrupción típico para dispositivos móviles. */
/* { */

/* } */


/* --------------------RESPONSIVE HEADER-------------------- */

@media screen and (max-width:480px) {

    .btn
    /* Como puede ver, cambiamos algunas propiedades de tamaño de fuente, cambiamos los rellenos del contenedor de la sección y cambiamos la propiedad de visualización del botón a block, convirtiéndolo en un elemento de nivel de bloque que ocupa todo el ancho de su contenedor. */

    /* Tenga en cuenta que no es necesario redefinir todo el estilo de los elementos de la consulta de medios. Solo necesitamos definir el estilo que queremos cambiar. */
    {
        display: block;
        font-size: 18px;
        width: 20%;
        margin: auto;
    }

    h1{
        font-size: 32px;
        margin: 0 0 8px 0;
    }

    h2{
        font-size: 18px;
    }

    section{
        padding: 25px 0 15px 0;
    }
    /* ----------------------RESPONSIVE FEATURES----------------------- */

/* ¡Es hora de hacer que la "sección de características" responda! */

/* Actualmente incluye 3 funciones alineadas una al lado de la otra. */

/* Cambiamos el ancho de cada característica div al 100% y configuramos la propiedad de visualización en flex, lo que hace que div sea un contenedor flexbox. Esto nos permite colocar las entidades secundarias horizontalmente y también establecer la alineación de sus elementos secundarios, el icono y el texto, utilizando las propiedades align-items y justify-content. */

/* También configuramos el ancho de los iconos y definimos algunos márgenes. */

/* Ahora, las features se alinearán una al lado de la otra en pantallas más grandes y una debajo de la otra en pantallas más pequeñas. */

/* estos pasos no los hice por el problemas de las imagenes, pero aqui esta el codigo que habia que añadirle */
    .feature{
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: left;
    margin: 0 0 10px 0;
    font-size: 16px;

    }

    .feature img{
    width: 15%;
    min-height: 60px;
    margin-right: 20px;
    }

/* -----------------------------------RESPONSIVE QUOTE........................... */

/* Para nuestra sección de cotizaciones, solo cambiaremos el tamaño del texto y algunos rellenos: */
    .quote{
        padding: 30px 0;
    }

    blockquote p{
        font-size: 18px;
    }

    blockquote cite{
        font-size: 14px;

/* No necesitamos cambiar la posición de los elementos de la sección, ya que ya están alineados con el centro de la pantalla. */

    }

/* -----------------------------RESPONSIVE FOOTER--------------------------- */

/* Por último, pero no menos importante, debemos cambiar nuestra sección de pie de página. */

/* Necesitamos colocar los enlaces del menú uno debajo del otro: */

    footer{
        padding: 30px 0 10 0;
        
    }
    footer li{
        display: block;
        margin: 5px 0;
    }

    /* El "display: block;" style hace que los elementos de la lista bloqueen elementos de nivel para que ocupen todo el ancho de su contenedor. Esto hace que los elementos se alineen entre sí: */

    /* ------------------EXTRAS---------------- */
    .btn:active, h1:active, h2:active, .feature p:active, .quote p:active, cite:active {
        color: #121212;
        transition: linear;
        transition-duration: 0.5s;
    }

/* ---------------------------------SUBMENU (MEDIA QUERIES)-------------------- */
/*     
    Es hora de usar CSS en nuestra consulta de medios.

    Necesitamos ampliar el submenú y empujar hacia abajo la página, en lugar de abrirlo sobre los elementos. */

    .submenu{
        width: 100%;
        position: relative;
    }
    /* Solo necesitamos cambiar el ancho y la propiedad de posición del submenú. */

    /* Actualmente, el submenú siempre está abierto. Agregaremos la animación de abrir / cerrar en la siguiente lección. */
}

/* ---------------------NOTAS RESPONDSIVAS----------------- */

/* Una parte importante de nuestro diseño fue no usar unidades fijas para nuestros anchos. */

/* Usamos valores porcentuales, que hicieron que los elementos se extendieran en relación con el ancho de sus padres. */

/* Este enfoque permite que los elementos sean más flexibles, lo cual es esencial al momento de armar un diseño receptivo. */

